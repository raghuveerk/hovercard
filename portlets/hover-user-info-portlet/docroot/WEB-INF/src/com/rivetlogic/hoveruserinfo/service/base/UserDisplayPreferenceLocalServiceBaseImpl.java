/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.hoveruserinfo.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.rivetlogic.hoveruserinfo.model.UserDisplayPreference;
import com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceLocalService;
import com.rivetlogic.hoveruserinfo.service.persistence.UserDisplayPreferencePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user display preference local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.rivetlogic.hoveruserinfo.service.impl.UserDisplayPreferenceLocalServiceImpl}.
 * </p>
 *
 * @author juancarrillo
 * @see com.rivetlogic.hoveruserinfo.service.impl.UserDisplayPreferenceLocalServiceImpl
 * @see com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceLocalServiceUtil
 * @generated
 */
public abstract class UserDisplayPreferenceLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements UserDisplayPreferenceLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceLocalServiceUtil} to access the user display preference local service.
	 */

	/**
	 * Adds the user display preference to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userDisplayPreference the user display preference
	 * @return the user display preference that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserDisplayPreference addUserDisplayPreference(
		UserDisplayPreference userDisplayPreference) throws SystemException {
		userDisplayPreference.setNew(true);

		return userDisplayPreferencePersistence.update(userDisplayPreference);
	}

	/**
	 * Creates a new user display preference with the primary key. Does not add the user display preference to the database.
	 *
	 * @param preferenceId the primary key for the new user display preference
	 * @return the new user display preference
	 */
	@Override
	public UserDisplayPreference createUserDisplayPreference(long preferenceId) {
		return userDisplayPreferencePersistence.create(preferenceId);
	}

	/**
	 * Deletes the user display preference with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param preferenceId the primary key of the user display preference
	 * @return the user display preference that was removed
	 * @throws PortalException if a user display preference with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserDisplayPreference deleteUserDisplayPreference(long preferenceId)
		throws PortalException, SystemException {
		return userDisplayPreferencePersistence.remove(preferenceId);
	}

	/**
	 * Deletes the user display preference from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userDisplayPreference the user display preference
	 * @return the user display preference that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserDisplayPreference deleteUserDisplayPreference(
		UserDisplayPreference userDisplayPreference) throws SystemException {
		return userDisplayPreferencePersistence.remove(userDisplayPreference);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserDisplayPreference.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return userDisplayPreferencePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.hoveruserinfo.model.impl.UserDisplayPreferenceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return userDisplayPreferencePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.hoveruserinfo.model.impl.UserDisplayPreferenceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return userDisplayPreferencePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return userDisplayPreferencePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return userDisplayPreferencePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserDisplayPreference fetchUserDisplayPreference(long preferenceId)
		throws SystemException {
		return userDisplayPreferencePersistence.fetchByPrimaryKey(preferenceId);
	}

	/**
	 * Returns the user display preference with the primary key.
	 *
	 * @param preferenceId the primary key of the user display preference
	 * @return the user display preference
	 * @throws PortalException if a user display preference with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserDisplayPreference getUserDisplayPreference(long preferenceId)
		throws PortalException, SystemException {
		return userDisplayPreferencePersistence.findByPrimaryKey(preferenceId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return userDisplayPreferencePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the user display preferences.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rivetlogic.hoveruserinfo.model.impl.UserDisplayPreferenceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user display preferences
	 * @param end the upper bound of the range of user display preferences (not inclusive)
	 * @return the range of user display preferences
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<UserDisplayPreference> getUserDisplayPreferences(int start,
		int end) throws SystemException {
		return userDisplayPreferencePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user display preferences.
	 *
	 * @return the number of user display preferences
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getUserDisplayPreferencesCount() throws SystemException {
		return userDisplayPreferencePersistence.countAll();
	}

	/**
	 * Updates the user display preference in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userDisplayPreference the user display preference
	 * @return the user display preference that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserDisplayPreference updateUserDisplayPreference(
		UserDisplayPreference userDisplayPreference) throws SystemException {
		return userDisplayPreferencePersistence.update(userDisplayPreference);
	}

	/**
	 * Returns the user display preference local service.
	 *
	 * @return the user display preference local service
	 */
	public com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceLocalService getUserDisplayPreferenceLocalService() {
		return userDisplayPreferenceLocalService;
	}

	/**
	 * Sets the user display preference local service.
	 *
	 * @param userDisplayPreferenceLocalService the user display preference local service
	 */
	public void setUserDisplayPreferenceLocalService(
		com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceLocalService userDisplayPreferenceLocalService) {
		this.userDisplayPreferenceLocalService = userDisplayPreferenceLocalService;
	}

	/**
	 * Returns the user display preference remote service.
	 *
	 * @return the user display preference remote service
	 */
	public com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceService getUserDisplayPreferenceService() {
		return userDisplayPreferenceService;
	}

	/**
	 * Sets the user display preference remote service.
	 *
	 * @param userDisplayPreferenceService the user display preference remote service
	 */
	public void setUserDisplayPreferenceService(
		com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceService userDisplayPreferenceService) {
		this.userDisplayPreferenceService = userDisplayPreferenceService;
	}

	/**
	 * Returns the user display preference persistence.
	 *
	 * @return the user display preference persistence
	 */
	public UserDisplayPreferencePersistence getUserDisplayPreferencePersistence() {
		return userDisplayPreferencePersistence;
	}

	/**
	 * Sets the user display preference persistence.
	 *
	 * @param userDisplayPreferencePersistence the user display preference persistence
	 */
	public void setUserDisplayPreferencePersistence(
		UserDisplayPreferencePersistence userDisplayPreferencePersistence) {
		this.userDisplayPreferencePersistence = userDisplayPreferencePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.rivetlogic.hoveruserinfo.model.UserDisplayPreference",
			userDisplayPreferenceLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.rivetlogic.hoveruserinfo.model.UserDisplayPreference");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return UserDisplayPreference.class;
	}

	protected String getModelClassName() {
		return UserDisplayPreference.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = userDisplayPreferencePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceLocalService.class)
	protected com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceLocalService userDisplayPreferenceLocalService;
	@BeanReference(type = com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceService.class)
	protected com.rivetlogic.hoveruserinfo.service.UserDisplayPreferenceService userDisplayPreferenceService;
	@BeanReference(type = UserDisplayPreferencePersistence.class)
	protected UserDisplayPreferencePersistence userDisplayPreferencePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private UserDisplayPreferenceLocalServiceClpInvoker _clpInvoker = new UserDisplayPreferenceLocalServiceClpInvoker();
}