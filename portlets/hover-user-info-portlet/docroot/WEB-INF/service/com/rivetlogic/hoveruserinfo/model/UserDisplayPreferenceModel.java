/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.hoveruserinfo.model;

import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the UserDisplayPreference service. Represents a row in the &quot;rivetlogic_UserDisplayPreference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.rivetlogic.hoveruserinfo.model.impl.UserDisplayPreferenceModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.rivetlogic.hoveruserinfo.model.impl.UserDisplayPreferenceImpl}.
 * </p>
 *
 * @author juancarrillo
 * @see UserDisplayPreference
 * @see com.rivetlogic.hoveruserinfo.model.impl.UserDisplayPreferenceImpl
 * @see com.rivetlogic.hoveruserinfo.model.impl.UserDisplayPreferenceModelImpl
 * @generated
 */
public interface UserDisplayPreferenceModel extends BaseModel<UserDisplayPreference> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a user display preference model instance should use the {@link UserDisplayPreference} interface instead.
	 */

	/**
	 * Returns the primary key of this user display preference.
	 *
	 * @return the primary key of this user display preference
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this user display preference.
	 *
	 * @param primaryKey the primary key of this user display preference
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the preference ID of this user display preference.
	 *
	 * @return the preference ID of this user display preference
	 */
	public long getPreferenceId();

	/**
	 * Sets the preference ID of this user display preference.
	 *
	 * @param preferenceId the preference ID of this user display preference
	 */
	public void setPreferenceId(long preferenceId);

	/**
	 * Returns the company ID of this user display preference.
	 *
	 * @return the company ID of this user display preference
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this user display preference.
	 *
	 * @param companyId the company ID of this user display preference
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the add friend of this user display preference.
	 *
	 * @return the add friend of this user display preference
	 */
	public boolean getAddFriend();

	/**
	 * Returns <code>true</code> if this user display preference is add friend.
	 *
	 * @return <code>true</code> if this user display preference is add friend; <code>false</code> otherwise
	 */
	public boolean isAddFriend();

	/**
	 * Sets whether this user display preference is add friend.
	 *
	 * @param addFriend the add friend of this user display preference
	 */
	public void setAddFriend(boolean addFriend);

	/**
	 * Returns the common friends count of this user display preference.
	 *
	 * @return the common friends count of this user display preference
	 */
	public boolean getCommonFriendsCount();

	/**
	 * Returns <code>true</code> if this user display preference is common friends count.
	 *
	 * @return <code>true</code> if this user display preference is common friends count; <code>false</code> otherwise
	 */
	public boolean isCommonFriendsCount();

	/**
	 * Sets whether this user display preference is common friends count.
	 *
	 * @param commonFriendsCount the common friends count of this user display preference
	 */
	public void setCommonFriendsCount(boolean commonFriendsCount);

	/**
	 * Returns the common friends images of this user display preference.
	 *
	 * @return the common friends images of this user display preference
	 */
	public boolean getCommonFriendsImages();

	/**
	 * Returns <code>true</code> if this user display preference is common friends images.
	 *
	 * @return <code>true</code> if this user display preference is common friends images; <code>false</code> otherwise
	 */
	public boolean isCommonFriendsImages();

	/**
	 * Sets whether this user display preference is common friends images.
	 *
	 * @param commonFriendsImages the common friends images of this user display preference
	 */
	public void setCommonFriendsImages(boolean commonFriendsImages);

	/**
	 * Returns the job title of this user display preference.
	 *
	 * @return the job title of this user display preference
	 */
	public boolean getJobTitle();

	/**
	 * Returns <code>true</code> if this user display preference is job title.
	 *
	 * @return <code>true</code> if this user display preference is job title; <code>false</code> otherwise
	 */
	public boolean isJobTitle();

	/**
	 * Sets whether this user display preference is job title.
	 *
	 * @param jobTitle the job title of this user display preference
	 */
	public void setJobTitle(boolean jobTitle);

	/**
	 * Returns the join date of this user display preference.
	 *
	 * @return the join date of this user display preference
	 */
	public boolean getJoinDate();

	/**
	 * Returns <code>true</code> if this user display preference is join date.
	 *
	 * @return <code>true</code> if this user display preference is join date; <code>false</code> otherwise
	 */
	public boolean isJoinDate();

	/**
	 * Sets whether this user display preference is join date.
	 *
	 * @param joinDate the join date of this user display preference
	 */
	public void setJoinDate(boolean joinDate);

	/**
	 * Returns the last post date of this user display preference.
	 *
	 * @return the last post date of this user display preference
	 */
	public boolean getLastPostDate();

	/**
	 * Returns <code>true</code> if this user display preference is last post date.
	 *
	 * @return <code>true</code> if this user display preference is last post date; <code>false</code> otherwise
	 */
	public boolean isLastPostDate();

	/**
	 * Sets whether this user display preference is last post date.
	 *
	 * @param lastPostDate the last post date of this user display preference
	 */
	public void setLastPostDate(boolean lastPostDate);

	/**
	 * Returns the location of this user display preference.
	 *
	 * @return the location of this user display preference
	 */
	public boolean getLocation();

	/**
	 * Returns <code>true</code> if this user display preference is location.
	 *
	 * @return <code>true</code> if this user display preference is location; <code>false</code> otherwise
	 */
	public boolean isLocation();

	/**
	 * Sets whether this user display preference is location.
	 *
	 * @param location the location of this user display preference
	 */
	public void setLocation(boolean location);

	/**
	 * Returns the posts count of this user display preference.
	 *
	 * @return the posts count of this user display preference
	 */
	public boolean getPostsCount();

	/**
	 * Returns <code>true</code> if this user display preference is posts count.
	 *
	 * @return <code>true</code> if this user display preference is posts count; <code>false</code> otherwise
	 */
	public boolean isPostsCount();

	/**
	 * Sets whether this user display preference is posts count.
	 *
	 * @param postsCount the posts count of this user display preference
	 */
	public void setPostsCount(boolean postsCount);

	/**
	 * Returns the rank of this user display preference.
	 *
	 * @return the rank of this user display preference
	 */
	public boolean getRank();

	/**
	 * Returns <code>true</code> if this user display preference is rank.
	 *
	 * @return <code>true</code> if this user display preference is rank; <code>false</code> otherwise
	 */
	public boolean isRank();

	/**
	 * Sets whether this user display preference is rank.
	 *
	 * @param rank the rank of this user display preference
	 */
	public void setRank(boolean rank);

	/**
	 * Returns the stars of this user display preference.
	 *
	 * @return the stars of this user display preference
	 */
	public boolean getStars();

	/**
	 * Returns <code>true</code> if this user display preference is stars.
	 *
	 * @return <code>true</code> if this user display preference is stars; <code>false</code> otherwise
	 */
	public boolean isStars();

	/**
	 * Sets whether this user display preference is stars.
	 *
	 * @param stars the stars of this user display preference
	 */
	public void setStars(boolean stars);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(UserDisplayPreference userDisplayPreference);

	@Override
	public int hashCode();

	@Override
	public CacheModel<UserDisplayPreference> toCacheModel();

	@Override
	public UserDisplayPreference toEscapedModel();

	@Override
	public UserDisplayPreference toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}